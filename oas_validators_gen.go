// Code generated by ogen, DO NOT EDIT.

package browserbase

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *BrowserbaseProxyConfig) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BrowserbaseProxyConfigType) Validate() error {
	switch s {
	case "browserbase":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExternalProxyConfig) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExternalProxyConfigType) Validate() error {
	switch s {
	case "external":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s LogListResponse) Validate() error {
	alias := ([]SessionLog)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ProjectListResponse) Validate() error {
	alias := ([]Project)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *ProjectUsage) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.BrowserMinutes)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "browserMinutes",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ProxyBytes)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "proxyBytes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RecordingRetrieveResponse) Validate() error {
	alias := ([]SessionRecording)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *Session) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ProxyBytes)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "proxyBytes",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AvgCpuUsage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "avgCpuUsage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MemoryUsage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "memoryUsage",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SessionBrowserSettings) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Fingerprint.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fingerprint",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SessionBrowserSettingsFingerprint) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Browsers {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "browsers",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Devices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "devices",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HttpVersion.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "httpVersion",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OperatingSystems {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "operatingSystems",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionBrowserSettingsFingerprintBrowsersItem) Validate() error {
	switch s {
	case "chrome":
		return nil
	case "edge":
		return nil
	case "firefox":
		return nil
	case "safari":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SessionBrowserSettingsFingerprintDevicesItem) Validate() error {
	switch s {
	case "desktop":
		return nil
	case "mobile":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SessionBrowserSettingsFingerprintHttpVersion) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SessionBrowserSettingsFingerprintOperatingSystemsItem) Validate() error {
	switch s {
	case "android":
		return nil
	case "ios":
		return nil
	case "linux":
		return nil
	case "macos":
		return nil
	case "windows":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionCreateParams) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BrowserSettings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "browserSettings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Proxies.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "proxies",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Region.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionCreateParamsProxies) Validate() error {
	switch s.Type {
	case BoolSessionCreateParamsProxies:
		return nil // no validation needed
	case SessionCreateParamsProxies1ItemArraySessionCreateParamsProxies:
		if s.SessionCreateParamsProxies1ItemArray == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.SessionCreateParamsProxies1ItemArray {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s SessionCreateParamsProxies1Item) Validate() error {
	switch s.Type {
	case BrowserbaseProxyConfigSessionCreateParamsProxies1Item:
		if err := s.BrowserbaseProxyConfig.Validate(); err != nil {
			return err
		}
		return nil
	case ExternalProxyConfigSessionCreateParamsProxies1Item:
		if err := s.ExternalProxyConfig.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s SessionCreateParamsRegion) Validate() error {
	switch s {
	case "us-west-2":
		return nil
	case "us-east-1":
		return nil
	case "eu-central-1":
		return nil
	case "ap-southeast-1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionCreateResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ProxyBytes)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "proxyBytes",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Region.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "region",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AvgCpuUsage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "avgCpuUsage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MemoryUsage.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "memoryUsage",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionCreateResponseRegion) Validate() error {
	switch s {
	case "us-west-2":
		return nil
	case "us-east-1":
		return nil
	case "eu-central-1":
		return nil
	case "ap-southeast-1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SessionListResponse) Validate() error {
	alias := ([]Session)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SessionLiveURLs) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Pages == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pages",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionRegion) Validate() error {
	switch s {
	case "us-west-2":
		return nil
	case "us-east-1":
		return nil
	case "eu-central-1":
		return nil
	case "ap-southeast-1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SessionStatus) Validate() error {
	switch s {
	case "RUNNING":
		return nil
	case "ERROR":
		return nil
	case "TIMED_OUT":
		return nil
	case "COMPLETED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionUpdateParams) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionUpdateParamsStatus) Validate() error {
	switch s {
	case "REQUEST_RELEASE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
