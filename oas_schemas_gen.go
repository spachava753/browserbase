// Code generated by ogen, DO NOT EDIT.

package browserbase

import (
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/BrowserbaseProxyConfig
type BrowserbaseProxyConfig struct {
	Type          BrowserbaseProxyConfigType `json:"type"`
	DomainPattern OptString                  `json:"domainPattern"`
	Geolocation   OptGeolocation             `json:"geolocation"`
}

// GetType returns the value of Type.
func (s *BrowserbaseProxyConfig) GetType() BrowserbaseProxyConfigType {
	return s.Type
}

// GetDomainPattern returns the value of DomainPattern.
func (s *BrowserbaseProxyConfig) GetDomainPattern() OptString {
	return s.DomainPattern
}

// GetGeolocation returns the value of Geolocation.
func (s *BrowserbaseProxyConfig) GetGeolocation() OptGeolocation {
	return s.Geolocation
}

// SetType sets the value of Type.
func (s *BrowserbaseProxyConfig) SetType(val BrowserbaseProxyConfigType) {
	s.Type = val
}

// SetDomainPattern sets the value of DomainPattern.
func (s *BrowserbaseProxyConfig) SetDomainPattern(val OptString) {
	s.DomainPattern = val
}

// SetGeolocation sets the value of Geolocation.
func (s *BrowserbaseProxyConfig) SetGeolocation(val OptGeolocation) {
	s.Geolocation = val
}

type BrowserbaseProxyConfigType string

const (
	BrowserbaseProxyConfigTypeBrowserbase BrowserbaseProxyConfigType = "browserbase"
)

// AllValues returns all BrowserbaseProxyConfigType values.
func (BrowserbaseProxyConfigType) AllValues() []BrowserbaseProxyConfigType {
	return []BrowserbaseProxyConfigType{
		BrowserbaseProxyConfigTypeBrowserbase,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BrowserbaseProxyConfigType) MarshalText() ([]byte, error) {
	switch s {
	case BrowserbaseProxyConfigTypeBrowserbase:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BrowserbaseProxyConfigType) UnmarshalText(data []byte) error {
	switch BrowserbaseProxyConfigType(data) {
	case BrowserbaseProxyConfigTypeBrowserbase:
		*s = BrowserbaseProxyConfigTypeBrowserbase
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Context
type Context struct {
	ID string `json:"id"`
	// The Project ID linked to the uploaded Context.
	ProjectId string `json:"projectId"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Context) GetID() string {
	return s.ID
}

// GetProjectId returns the value of ProjectId.
func (s *Context) GetProjectId() string {
	return s.ProjectId
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Context) GetCreatedAt() string {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Context) GetUpdatedAt() string {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Context) SetID(val string) {
	s.ID = val
}

// SetProjectId sets the value of ProjectId.
func (s *Context) SetProjectId(val string) {
	s.ProjectId = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Context) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Context) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/ContextCreateParams
type ContextCreateParams struct {
	// The Project ID. Can be found in Settings.
	ProjectId string `json:"projectId"`
}

// GetProjectId returns the value of ProjectId.
func (s *ContextCreateParams) GetProjectId() string {
	return s.ProjectId
}

// SetProjectId sets the value of ProjectId.
func (s *ContextCreateParams) SetProjectId(val string) {
	s.ProjectId = val
}

// Ref: #/components/schemas/ContextCreateResponse
type ContextCreateResponse struct {
	ID string `json:"id"`
	// The cipher algorithm used (AES-256-CBC).
	CipherAlgorithm string `json:"cipherAlgorithm"`
	// Initialization vector size.
	InitializationVectorSize int    `json:"initializationVectorSize"`
	PublicKey                string `json:"publicKey"`
	// Upload URL for custom user-data-directory.
	UploadUrl string `json:"uploadUrl"`
}

// GetID returns the value of ID.
func (s *ContextCreateResponse) GetID() string {
	return s.ID
}

// GetCipherAlgorithm returns the value of CipherAlgorithm.
func (s *ContextCreateResponse) GetCipherAlgorithm() string {
	return s.CipherAlgorithm
}

// GetInitializationVectorSize returns the value of InitializationVectorSize.
func (s *ContextCreateResponse) GetInitializationVectorSize() int {
	return s.InitializationVectorSize
}

// GetPublicKey returns the value of PublicKey.
func (s *ContextCreateResponse) GetPublicKey() string {
	return s.PublicKey
}

// GetUploadUrl returns the value of UploadUrl.
func (s *ContextCreateResponse) GetUploadUrl() string {
	return s.UploadUrl
}

// SetID sets the value of ID.
func (s *ContextCreateResponse) SetID(val string) {
	s.ID = val
}

// SetCipherAlgorithm sets the value of CipherAlgorithm.
func (s *ContextCreateResponse) SetCipherAlgorithm(val string) {
	s.CipherAlgorithm = val
}

// SetInitializationVectorSize sets the value of InitializationVectorSize.
func (s *ContextCreateResponse) SetInitializationVectorSize(val int) {
	s.InitializationVectorSize = val
}

// SetPublicKey sets the value of PublicKey.
func (s *ContextCreateResponse) SetPublicKey(val string) {
	s.PublicKey = val
}

// SetUploadUrl sets the value of UploadUrl.
func (s *ContextCreateResponse) SetUploadUrl(val string) {
	s.UploadUrl = val
}

// DeleteExtensionNoContent is response for DeleteExtension operation.
type DeleteExtensionNoContent struct{}

// Ref: #/components/schemas/Extension
type Extension struct {
	ID        string `json:"id"`
	CreatedAt string `json:"createdAt"`
	FileName  string `json:"fileName"`
	ProjectId string `json:"projectId"`
	UpdatedAt string `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Extension) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Extension) GetCreatedAt() string {
	return s.CreatedAt
}

// GetFileName returns the value of FileName.
func (s *Extension) GetFileName() string {
	return s.FileName
}

// GetProjectId returns the value of ProjectId.
func (s *Extension) GetProjectId() string {
	return s.ProjectId
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Extension) GetUpdatedAt() string {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Extension) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Extension) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetFileName sets the value of FileName.
func (s *Extension) SetFileName(val string) {
	s.FileName = val
}

// SetProjectId sets the value of ProjectId.
func (s *Extension) SetProjectId(val string) {
	s.ProjectId = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Extension) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/ExtensionCreateParams
type ExtensionCreateParamsMultipart struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *ExtensionCreateParamsMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *ExtensionCreateParamsMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/ExternalProxyConfig
type ExternalProxyConfig struct {
	Type          ExternalProxyConfigType `json:"type"`
	Server        string                  `json:"server"`
	DomainPattern OptString               `json:"domainPattern"`
	Password      OptString               `json:"password"`
	Username      OptString               `json:"username"`
}

// GetType returns the value of Type.
func (s *ExternalProxyConfig) GetType() ExternalProxyConfigType {
	return s.Type
}

// GetServer returns the value of Server.
func (s *ExternalProxyConfig) GetServer() string {
	return s.Server
}

// GetDomainPattern returns the value of DomainPattern.
func (s *ExternalProxyConfig) GetDomainPattern() OptString {
	return s.DomainPattern
}

// GetPassword returns the value of Password.
func (s *ExternalProxyConfig) GetPassword() OptString {
	return s.Password
}

// GetUsername returns the value of Username.
func (s *ExternalProxyConfig) GetUsername() OptString {
	return s.Username
}

// SetType sets the value of Type.
func (s *ExternalProxyConfig) SetType(val ExternalProxyConfigType) {
	s.Type = val
}

// SetServer sets the value of Server.
func (s *ExternalProxyConfig) SetServer(val string) {
	s.Server = val
}

// SetDomainPattern sets the value of DomainPattern.
func (s *ExternalProxyConfig) SetDomainPattern(val OptString) {
	s.DomainPattern = val
}

// SetPassword sets the value of Password.
func (s *ExternalProxyConfig) SetPassword(val OptString) {
	s.Password = val
}

// SetUsername sets the value of Username.
func (s *ExternalProxyConfig) SetUsername(val OptString) {
	s.Username = val
}

type ExternalProxyConfigType string

const (
	ExternalProxyConfigTypeExternal ExternalProxyConfigType = "external"
)

// AllValues returns all ExternalProxyConfigType values.
func (ExternalProxyConfigType) AllValues() []ExternalProxyConfigType {
	return []ExternalProxyConfigType{
		ExternalProxyConfigTypeExternal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExternalProxyConfigType) MarshalText() ([]byte, error) {
	switch s {
	case ExternalProxyConfigTypeExternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExternalProxyConfigType) UnmarshalText(data []byte) error {
	switch ExternalProxyConfigType(data) {
	case ExternalProxyConfigTypeExternal:
		*s = ExternalProxyConfigTypeExternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Geolocation
type Geolocation struct {
	Country string    `json:"country"`
	City    OptString `json:"city"`
	State   OptString `json:"state"`
}

// GetCountry returns the value of Country.
func (s *Geolocation) GetCountry() string {
	return s.Country
}

// GetCity returns the value of City.
func (s *Geolocation) GetCity() OptString {
	return s.City
}

// GetState returns the value of State.
func (s *Geolocation) GetState() OptString {
	return s.State
}

// SetCountry sets the value of Country.
func (s *Geolocation) SetCountry(val string) {
	s.Country = val
}

// SetCity sets the value of City.
func (s *Geolocation) SetCity(val OptString) {
	s.City = val
}

// SetState sets the value of State.
func (s *Geolocation) SetState(val OptString) {
	s.State = val
}

type ListSessionDownloadsOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ListSessionDownloadsOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

type LogListResponse []SessionLog

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGeolocation returns new OptGeolocation with value set to v.
func NewOptGeolocation(v Geolocation) OptGeolocation {
	return OptGeolocation{
		Value: v,
		Set:   true,
	}
}

// OptGeolocation is optional Geolocation.
type OptGeolocation struct {
	Value Geolocation
	Set   bool
}

// IsSet returns true if OptGeolocation was set.
func (o OptGeolocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGeolocation) Reset() {
	var v Geolocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGeolocation) SetTo(v Geolocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGeolocation) Get() (v Geolocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGeolocation) Or(d Geolocation) Geolocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64 returns new OptNilFloat64 with value set to v.
func NewOptNilFloat64(v float64) OptNilFloat64 {
	return OptNilFloat64{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64 is optional nullable float64.
type OptNilFloat64 struct {
	Value float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64 was set.
func (o OptNilFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64) SetTo(v float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilFloat64) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilFloat64) SetToNull() {
	o.Set = true
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSessionCreateResponseUserMetadata returns new OptNilSessionCreateResponseUserMetadata with value set to v.
func NewOptNilSessionCreateResponseUserMetadata(v SessionCreateResponseUserMetadata) OptNilSessionCreateResponseUserMetadata {
	return OptNilSessionCreateResponseUserMetadata{
		Value: v,
		Set:   true,
	}
}

// OptNilSessionCreateResponseUserMetadata is optional nullable SessionCreateResponseUserMetadata.
type OptNilSessionCreateResponseUserMetadata struct {
	Value SessionCreateResponseUserMetadata
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSessionCreateResponseUserMetadata was set.
func (o OptNilSessionCreateResponseUserMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSessionCreateResponseUserMetadata) Reset() {
	var v SessionCreateResponseUserMetadata
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSessionCreateResponseUserMetadata) SetTo(v SessionCreateResponseUserMetadata) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilSessionCreateResponseUserMetadata) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilSessionCreateResponseUserMetadata) SetToNull() {
	o.Set = true
	o.Null = true
	var v SessionCreateResponseUserMetadata
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSessionCreateResponseUserMetadata) Get() (v SessionCreateResponseUserMetadata, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSessionCreateResponseUserMetadata) Or(d SessionCreateResponseUserMetadata) SessionCreateResponseUserMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSessionUserMetadata returns new OptNilSessionUserMetadata with value set to v.
func NewOptNilSessionUserMetadata(v SessionUserMetadata) OptNilSessionUserMetadata {
	return OptNilSessionUserMetadata{
		Value: v,
		Set:   true,
	}
}

// OptNilSessionUserMetadata is optional nullable SessionUserMetadata.
type OptNilSessionUserMetadata struct {
	Value SessionUserMetadata
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSessionUserMetadata was set.
func (o OptNilSessionUserMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSessionUserMetadata) Reset() {
	var v SessionUserMetadata
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSessionUserMetadata) SetTo(v SessionUserMetadata) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilSessionUserMetadata) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilSessionUserMetadata) SetToNull() {
	o.Set = true
	o.Null = true
	var v SessionUserMetadata
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSessionUserMetadata) Get() (v SessionUserMetadata, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSessionUserMetadata) Or(d SessionUserMetadata) SessionUserMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettings returns new OptSessionBrowserSettings with value set to v.
func NewOptSessionBrowserSettings(v SessionBrowserSettings) OptSessionBrowserSettings {
	return OptSessionBrowserSettings{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettings is optional SessionBrowserSettings.
type OptSessionBrowserSettings struct {
	Value SessionBrowserSettings
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettings was set.
func (o OptSessionBrowserSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettings) Reset() {
	var v SessionBrowserSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettings) SetTo(v SessionBrowserSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettings) Get() (v SessionBrowserSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettings) Or(d SessionBrowserSettings) SessionBrowserSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettingsContext returns new OptSessionBrowserSettingsContext with value set to v.
func NewOptSessionBrowserSettingsContext(v SessionBrowserSettingsContext) OptSessionBrowserSettingsContext {
	return OptSessionBrowserSettingsContext{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettingsContext is optional SessionBrowserSettingsContext.
type OptSessionBrowserSettingsContext struct {
	Value SessionBrowserSettingsContext
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettingsContext was set.
func (o OptSessionBrowserSettingsContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettingsContext) Reset() {
	var v SessionBrowserSettingsContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettingsContext) SetTo(v SessionBrowserSettingsContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettingsContext) Get() (v SessionBrowserSettingsContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettingsContext) Or(d SessionBrowserSettingsContext) SessionBrowserSettingsContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettingsFingerprint returns new OptSessionBrowserSettingsFingerprint with value set to v.
func NewOptSessionBrowserSettingsFingerprint(v SessionBrowserSettingsFingerprint) OptSessionBrowserSettingsFingerprint {
	return OptSessionBrowserSettingsFingerprint{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettingsFingerprint is optional SessionBrowserSettingsFingerprint.
type OptSessionBrowserSettingsFingerprint struct {
	Value SessionBrowserSettingsFingerprint
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettingsFingerprint was set.
func (o OptSessionBrowserSettingsFingerprint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettingsFingerprint) Reset() {
	var v SessionBrowserSettingsFingerprint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettingsFingerprint) SetTo(v SessionBrowserSettingsFingerprint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettingsFingerprint) Get() (v SessionBrowserSettingsFingerprint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettingsFingerprint) Or(d SessionBrowserSettingsFingerprint) SessionBrowserSettingsFingerprint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettingsFingerprintHttpVersion returns new OptSessionBrowserSettingsFingerprintHttpVersion with value set to v.
func NewOptSessionBrowserSettingsFingerprintHttpVersion(v SessionBrowserSettingsFingerprintHttpVersion) OptSessionBrowserSettingsFingerprintHttpVersion {
	return OptSessionBrowserSettingsFingerprintHttpVersion{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettingsFingerprintHttpVersion is optional SessionBrowserSettingsFingerprintHttpVersion.
type OptSessionBrowserSettingsFingerprintHttpVersion struct {
	Value SessionBrowserSettingsFingerprintHttpVersion
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettingsFingerprintHttpVersion was set.
func (o OptSessionBrowserSettingsFingerprintHttpVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettingsFingerprintHttpVersion) Reset() {
	var v SessionBrowserSettingsFingerprintHttpVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettingsFingerprintHttpVersion) SetTo(v SessionBrowserSettingsFingerprintHttpVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettingsFingerprintHttpVersion) Get() (v SessionBrowserSettingsFingerprintHttpVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettingsFingerprintHttpVersion) Or(d SessionBrowserSettingsFingerprintHttpVersion) SessionBrowserSettingsFingerprintHttpVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettingsFingerprintScreen returns new OptSessionBrowserSettingsFingerprintScreen with value set to v.
func NewOptSessionBrowserSettingsFingerprintScreen(v SessionBrowserSettingsFingerprintScreen) OptSessionBrowserSettingsFingerprintScreen {
	return OptSessionBrowserSettingsFingerprintScreen{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettingsFingerprintScreen is optional SessionBrowserSettingsFingerprintScreen.
type OptSessionBrowserSettingsFingerprintScreen struct {
	Value SessionBrowserSettingsFingerprintScreen
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettingsFingerprintScreen was set.
func (o OptSessionBrowserSettingsFingerprintScreen) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettingsFingerprintScreen) Reset() {
	var v SessionBrowserSettingsFingerprintScreen
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettingsFingerprintScreen) SetTo(v SessionBrowserSettingsFingerprintScreen) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettingsFingerprintScreen) Get() (v SessionBrowserSettingsFingerprintScreen, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettingsFingerprintScreen) Or(d SessionBrowserSettingsFingerprintScreen) SessionBrowserSettingsFingerprintScreen {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionBrowserSettingsViewport returns new OptSessionBrowserSettingsViewport with value set to v.
func NewOptSessionBrowserSettingsViewport(v SessionBrowserSettingsViewport) OptSessionBrowserSettingsViewport {
	return OptSessionBrowserSettingsViewport{
		Value: v,
		Set:   true,
	}
}

// OptSessionBrowserSettingsViewport is optional SessionBrowserSettingsViewport.
type OptSessionBrowserSettingsViewport struct {
	Value SessionBrowserSettingsViewport
	Set   bool
}

// IsSet returns true if OptSessionBrowserSettingsViewport was set.
func (o OptSessionBrowserSettingsViewport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionBrowserSettingsViewport) Reset() {
	var v SessionBrowserSettingsViewport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionBrowserSettingsViewport) SetTo(v SessionBrowserSettingsViewport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionBrowserSettingsViewport) Get() (v SessionBrowserSettingsViewport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionBrowserSettingsViewport) Or(d SessionBrowserSettingsViewport) SessionBrowserSettingsViewport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionCreateParamsProxies returns new OptSessionCreateParamsProxies with value set to v.
func NewOptSessionCreateParamsProxies(v SessionCreateParamsProxies) OptSessionCreateParamsProxies {
	return OptSessionCreateParamsProxies{
		Value: v,
		Set:   true,
	}
}

// OptSessionCreateParamsProxies is optional SessionCreateParamsProxies.
type OptSessionCreateParamsProxies struct {
	Value SessionCreateParamsProxies
	Set   bool
}

// IsSet returns true if OptSessionCreateParamsProxies was set.
func (o OptSessionCreateParamsProxies) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionCreateParamsProxies) Reset() {
	var v SessionCreateParamsProxies
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionCreateParamsProxies) SetTo(v SessionCreateParamsProxies) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionCreateParamsProxies) Get() (v SessionCreateParamsProxies, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionCreateParamsProxies) Or(d SessionCreateParamsProxies) SessionCreateParamsProxies {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionCreateParamsRegion returns new OptSessionCreateParamsRegion with value set to v.
func NewOptSessionCreateParamsRegion(v SessionCreateParamsRegion) OptSessionCreateParamsRegion {
	return OptSessionCreateParamsRegion{
		Value: v,
		Set:   true,
	}
}

// OptSessionCreateParamsRegion is optional SessionCreateParamsRegion.
type OptSessionCreateParamsRegion struct {
	Value SessionCreateParamsRegion
	Set   bool
}

// IsSet returns true if OptSessionCreateParamsRegion was set.
func (o OptSessionCreateParamsRegion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionCreateParamsRegion) Reset() {
	var v SessionCreateParamsRegion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionCreateParamsRegion) SetTo(v SessionCreateParamsRegion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionCreateParamsRegion) Get() (v SessionCreateParamsRegion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionCreateParamsRegion) Or(d SessionCreateParamsRegion) SessionCreateParamsRegion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionCreateParamsUserMetadata returns new OptSessionCreateParamsUserMetadata with value set to v.
func NewOptSessionCreateParamsUserMetadata(v SessionCreateParamsUserMetadata) OptSessionCreateParamsUserMetadata {
	return OptSessionCreateParamsUserMetadata{
		Value: v,
		Set:   true,
	}
}

// OptSessionCreateParamsUserMetadata is optional SessionCreateParamsUserMetadata.
type OptSessionCreateParamsUserMetadata struct {
	Value SessionCreateParamsUserMetadata
	Set   bool
}

// IsSet returns true if OptSessionCreateParamsUserMetadata was set.
func (o OptSessionCreateParamsUserMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionCreateParamsUserMetadata) Reset() {
	var v SessionCreateParamsUserMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionCreateParamsUserMetadata) SetTo(v SessionCreateParamsUserMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionCreateParamsUserMetadata) Get() (v SessionCreateParamsUserMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionCreateParamsUserMetadata) Or(d SessionCreateParamsUserMetadata) SessionCreateParamsUserMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionLogRequest returns new OptSessionLogRequest with value set to v.
func NewOptSessionLogRequest(v SessionLogRequest) OptSessionLogRequest {
	return OptSessionLogRequest{
		Value: v,
		Set:   true,
	}
}

// OptSessionLogRequest is optional SessionLogRequest.
type OptSessionLogRequest struct {
	Value SessionLogRequest
	Set   bool
}

// IsSet returns true if OptSessionLogRequest was set.
func (o OptSessionLogRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionLogRequest) Reset() {
	var v SessionLogRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionLogRequest) SetTo(v SessionLogRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionLogRequest) Get() (v SessionLogRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionLogRequest) Or(d SessionLogRequest) SessionLogRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionLogResponse returns new OptSessionLogResponse with value set to v.
func NewOptSessionLogResponse(v SessionLogResponse) OptSessionLogResponse {
	return OptSessionLogResponse{
		Value: v,
		Set:   true,
	}
}

// OptSessionLogResponse is optional SessionLogResponse.
type OptSessionLogResponse struct {
	Value SessionLogResponse
	Set   bool
}

// IsSet returns true if OptSessionLogResponse was set.
func (o OptSessionLogResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionLogResponse) Reset() {
	var v SessionLogResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionLogResponse) SetTo(v SessionLogResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionLogResponse) Get() (v SessionLogResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionLogResponse) Or(d SessionLogResponse) SessionLogResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSessionStatus returns new OptSessionStatus with value set to v.
func NewOptSessionStatus(v SessionStatus) OptSessionStatus {
	return OptSessionStatus{
		Value: v,
		Set:   true,
	}
}

// OptSessionStatus is optional SessionStatus.
type OptSessionStatus struct {
	Value SessionStatus
	Set   bool
}

// IsSet returns true if OptSessionStatus was set.
func (o OptSessionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSessionStatus) Reset() {
	var v SessionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSessionStatus) SetTo(v SessionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSessionStatus) Get() (v SessionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSessionStatus) Or(d SessionStatus) SessionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Project
type Project struct {
	ID string `json:"id"`
	// Max concurrent sessions.
	Concurrency    int    `json:"concurrency"`
	CreatedAt      string `json:"createdAt"`
	DefaultTimeout int    `json:"defaultTimeout"`
	Name           string `json:"name"`
	OwnerId        string `json:"ownerId"`
	UpdatedAt      string `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Project) GetID() string {
	return s.ID
}

// GetConcurrency returns the value of Concurrency.
func (s *Project) GetConcurrency() int {
	return s.Concurrency
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() string {
	return s.CreatedAt
}

// GetDefaultTimeout returns the value of DefaultTimeout.
func (s *Project) GetDefaultTimeout() int {
	return s.DefaultTimeout
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetOwnerId returns the value of OwnerId.
func (s *Project) GetOwnerId() string {
	return s.OwnerId
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Project) GetUpdatedAt() string {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Project) SetID(val string) {
	s.ID = val
}

// SetConcurrency sets the value of Concurrency.
func (s *Project) SetConcurrency(val int) {
	s.Concurrency = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetDefaultTimeout sets the value of DefaultTimeout.
func (s *Project) SetDefaultTimeout(val int) {
	s.DefaultTimeout = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetOwnerId sets the value of OwnerId.
func (s *Project) SetOwnerId(val string) {
	s.OwnerId = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Project) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

type ProjectListResponse []Project

// Ref: #/components/schemas/ProjectUsage
type ProjectUsage struct {
	BrowserMinutes float64 `json:"browserMinutes"`
	ProxyBytes     float64 `json:"proxyBytes"`
}

// GetBrowserMinutes returns the value of BrowserMinutes.
func (s *ProjectUsage) GetBrowserMinutes() float64 {
	return s.BrowserMinutes
}

// GetProxyBytes returns the value of ProxyBytes.
func (s *ProjectUsage) GetProxyBytes() float64 {
	return s.ProxyBytes
}

// SetBrowserMinutes sets the value of BrowserMinutes.
func (s *ProjectUsage) SetBrowserMinutes(val float64) {
	s.BrowserMinutes = val
}

// SetProxyBytes sets the value of ProxyBytes.
func (s *ProjectUsage) SetProxyBytes(val float64) {
	s.ProxyBytes = val
}

type RecordingRetrieveResponse []SessionRecording

// Ref: #/components/schemas/Session
type Session struct {
	ID        string `json:"id"`
	CreatedAt string `json:"createdAt"`
	ExpiresAt string `json:"expiresAt"`
	// Whether the session should be kept alive upon disconnections.
	KeepAlive    bool                      `json:"keepAlive"`
	ProjectId    string                    `json:"projectId"`
	ProxyBytes   float64                   `json:"proxyBytes"`
	Region       SessionRegion             `json:"region"`
	StartedAt    string                    `json:"startedAt"`
	Status       SessionStatus             `json:"status"`
	UpdatedAt    string                    `json:"updatedAt"`
	AvgCpuUsage  OptNilFloat64             `json:"avgCpuUsage"`
	ContextId    OptNilString              `json:"contextId"`
	EndedAt      OptNilString              `json:"endedAt"`
	MemoryUsage  OptNilFloat64             `json:"memoryUsage"`
	UserMetadata OptNilSessionUserMetadata `json:"userMetadata"`
}

// GetID returns the value of ID.
func (s *Session) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Session) GetCreatedAt() string {
	return s.CreatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *Session) GetExpiresAt() string {
	return s.ExpiresAt
}

// GetKeepAlive returns the value of KeepAlive.
func (s *Session) GetKeepAlive() bool {
	return s.KeepAlive
}

// GetProjectId returns the value of ProjectId.
func (s *Session) GetProjectId() string {
	return s.ProjectId
}

// GetProxyBytes returns the value of ProxyBytes.
func (s *Session) GetProxyBytes() float64 {
	return s.ProxyBytes
}

// GetRegion returns the value of Region.
func (s *Session) GetRegion() SessionRegion {
	return s.Region
}

// GetStartedAt returns the value of StartedAt.
func (s *Session) GetStartedAt() string {
	return s.StartedAt
}

// GetStatus returns the value of Status.
func (s *Session) GetStatus() SessionStatus {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Session) GetUpdatedAt() string {
	return s.UpdatedAt
}

// GetAvgCpuUsage returns the value of AvgCpuUsage.
func (s *Session) GetAvgCpuUsage() OptNilFloat64 {
	return s.AvgCpuUsage
}

// GetContextId returns the value of ContextId.
func (s *Session) GetContextId() OptNilString {
	return s.ContextId
}

// GetEndedAt returns the value of EndedAt.
func (s *Session) GetEndedAt() OptNilString {
	return s.EndedAt
}

// GetMemoryUsage returns the value of MemoryUsage.
func (s *Session) GetMemoryUsage() OptNilFloat64 {
	return s.MemoryUsage
}

// GetUserMetadata returns the value of UserMetadata.
func (s *Session) GetUserMetadata() OptNilSessionUserMetadata {
	return s.UserMetadata
}

// SetID sets the value of ID.
func (s *Session) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Session) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *Session) SetExpiresAt(val string) {
	s.ExpiresAt = val
}

// SetKeepAlive sets the value of KeepAlive.
func (s *Session) SetKeepAlive(val bool) {
	s.KeepAlive = val
}

// SetProjectId sets the value of ProjectId.
func (s *Session) SetProjectId(val string) {
	s.ProjectId = val
}

// SetProxyBytes sets the value of ProxyBytes.
func (s *Session) SetProxyBytes(val float64) {
	s.ProxyBytes = val
}

// SetRegion sets the value of Region.
func (s *Session) SetRegion(val SessionRegion) {
	s.Region = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Session) SetStartedAt(val string) {
	s.StartedAt = val
}

// SetStatus sets the value of Status.
func (s *Session) SetStatus(val SessionStatus) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Session) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// SetAvgCpuUsage sets the value of AvgCpuUsage.
func (s *Session) SetAvgCpuUsage(val OptNilFloat64) {
	s.AvgCpuUsage = val
}

// SetContextId sets the value of ContextId.
func (s *Session) SetContextId(val OptNilString) {
	s.ContextId = val
}

// SetEndedAt sets the value of EndedAt.
func (s *Session) SetEndedAt(val OptNilString) {
	s.EndedAt = val
}

// SetMemoryUsage sets the value of MemoryUsage.
func (s *Session) SetMemoryUsage(val OptNilFloat64) {
	s.MemoryUsage = val
}

// SetUserMetadata sets the value of UserMetadata.
func (s *Session) SetUserMetadata(val OptNilSessionUserMetadata) {
	s.UserMetadata = val
}

// Ref: #/components/schemas/SessionBrowserSettings
type SessionBrowserSettings struct {
	AdvancedStealth OptBool                              `json:"advancedStealth"`
	BlockAds        OptBool                              `json:"blockAds"`
	Context         OptSessionBrowserSettingsContext     `json:"context"`
	ExtensionId     OptString                            `json:"extensionId"`
	Fingerprint     OptSessionBrowserSettingsFingerprint `json:"fingerprint"`
	LogSession      OptBool                              `json:"logSession"`
	RecordSession   OptBool                              `json:"recordSession"`
	SolveCaptchas   OptBool                              `json:"solveCaptchas"`
	Viewport        OptSessionBrowserSettingsViewport    `json:"viewport"`
}

// GetAdvancedStealth returns the value of AdvancedStealth.
func (s *SessionBrowserSettings) GetAdvancedStealth() OptBool {
	return s.AdvancedStealth
}

// GetBlockAds returns the value of BlockAds.
func (s *SessionBrowserSettings) GetBlockAds() OptBool {
	return s.BlockAds
}

// GetContext returns the value of Context.
func (s *SessionBrowserSettings) GetContext() OptSessionBrowserSettingsContext {
	return s.Context
}

// GetExtensionId returns the value of ExtensionId.
func (s *SessionBrowserSettings) GetExtensionId() OptString {
	return s.ExtensionId
}

// GetFingerprint returns the value of Fingerprint.
func (s *SessionBrowserSettings) GetFingerprint() OptSessionBrowserSettingsFingerprint {
	return s.Fingerprint
}

// GetLogSession returns the value of LogSession.
func (s *SessionBrowserSettings) GetLogSession() OptBool {
	return s.LogSession
}

// GetRecordSession returns the value of RecordSession.
func (s *SessionBrowserSettings) GetRecordSession() OptBool {
	return s.RecordSession
}

// GetSolveCaptchas returns the value of SolveCaptchas.
func (s *SessionBrowserSettings) GetSolveCaptchas() OptBool {
	return s.SolveCaptchas
}

// GetViewport returns the value of Viewport.
func (s *SessionBrowserSettings) GetViewport() OptSessionBrowserSettingsViewport {
	return s.Viewport
}

// SetAdvancedStealth sets the value of AdvancedStealth.
func (s *SessionBrowserSettings) SetAdvancedStealth(val OptBool) {
	s.AdvancedStealth = val
}

// SetBlockAds sets the value of BlockAds.
func (s *SessionBrowserSettings) SetBlockAds(val OptBool) {
	s.BlockAds = val
}

// SetContext sets the value of Context.
func (s *SessionBrowserSettings) SetContext(val OptSessionBrowserSettingsContext) {
	s.Context = val
}

// SetExtensionId sets the value of ExtensionId.
func (s *SessionBrowserSettings) SetExtensionId(val OptString) {
	s.ExtensionId = val
}

// SetFingerprint sets the value of Fingerprint.
func (s *SessionBrowserSettings) SetFingerprint(val OptSessionBrowserSettingsFingerprint) {
	s.Fingerprint = val
}

// SetLogSession sets the value of LogSession.
func (s *SessionBrowserSettings) SetLogSession(val OptBool) {
	s.LogSession = val
}

// SetRecordSession sets the value of RecordSession.
func (s *SessionBrowserSettings) SetRecordSession(val OptBool) {
	s.RecordSession = val
}

// SetSolveCaptchas sets the value of SolveCaptchas.
func (s *SessionBrowserSettings) SetSolveCaptchas(val OptBool) {
	s.SolveCaptchas = val
}

// SetViewport sets the value of Viewport.
func (s *SessionBrowserSettings) SetViewport(val OptSessionBrowserSettingsViewport) {
	s.Viewport = val
}

// Ref: #/components/schemas/SessionBrowserSettingsContext
type SessionBrowserSettingsContext struct {
	ID      string  `json:"id"`
	Persist OptBool `json:"persist"`
}

// GetID returns the value of ID.
func (s *SessionBrowserSettingsContext) GetID() string {
	return s.ID
}

// GetPersist returns the value of Persist.
func (s *SessionBrowserSettingsContext) GetPersist() OptBool {
	return s.Persist
}

// SetID sets the value of ID.
func (s *SessionBrowserSettingsContext) SetID(val string) {
	s.ID = val
}

// SetPersist sets the value of Persist.
func (s *SessionBrowserSettingsContext) SetPersist(val OptBool) {
	s.Persist = val
}

// Ref: #/components/schemas/SessionBrowserSettingsFingerprint
type SessionBrowserSettingsFingerprint struct {
	Browsers         []SessionBrowserSettingsFingerprintBrowsersItem         `json:"browsers"`
	Devices          []SessionBrowserSettingsFingerprintDevicesItem          `json:"devices"`
	HttpVersion      OptSessionBrowserSettingsFingerprintHttpVersion         `json:"httpVersion"`
	Locales          []string                                                `json:"locales"`
	OperatingSystems []SessionBrowserSettingsFingerprintOperatingSystemsItem `json:"operatingSystems"`
	Screen           OptSessionBrowserSettingsFingerprintScreen              `json:"screen"`
}

// GetBrowsers returns the value of Browsers.
func (s *SessionBrowserSettingsFingerprint) GetBrowsers() []SessionBrowserSettingsFingerprintBrowsersItem {
	return s.Browsers
}

// GetDevices returns the value of Devices.
func (s *SessionBrowserSettingsFingerprint) GetDevices() []SessionBrowserSettingsFingerprintDevicesItem {
	return s.Devices
}

// GetHttpVersion returns the value of HttpVersion.
func (s *SessionBrowserSettingsFingerprint) GetHttpVersion() OptSessionBrowserSettingsFingerprintHttpVersion {
	return s.HttpVersion
}

// GetLocales returns the value of Locales.
func (s *SessionBrowserSettingsFingerprint) GetLocales() []string {
	return s.Locales
}

// GetOperatingSystems returns the value of OperatingSystems.
func (s *SessionBrowserSettingsFingerprint) GetOperatingSystems() []SessionBrowserSettingsFingerprintOperatingSystemsItem {
	return s.OperatingSystems
}

// GetScreen returns the value of Screen.
func (s *SessionBrowserSettingsFingerprint) GetScreen() OptSessionBrowserSettingsFingerprintScreen {
	return s.Screen
}

// SetBrowsers sets the value of Browsers.
func (s *SessionBrowserSettingsFingerprint) SetBrowsers(val []SessionBrowserSettingsFingerprintBrowsersItem) {
	s.Browsers = val
}

// SetDevices sets the value of Devices.
func (s *SessionBrowserSettingsFingerprint) SetDevices(val []SessionBrowserSettingsFingerprintDevicesItem) {
	s.Devices = val
}

// SetHttpVersion sets the value of HttpVersion.
func (s *SessionBrowserSettingsFingerprint) SetHttpVersion(val OptSessionBrowserSettingsFingerprintHttpVersion) {
	s.HttpVersion = val
}

// SetLocales sets the value of Locales.
func (s *SessionBrowserSettingsFingerprint) SetLocales(val []string) {
	s.Locales = val
}

// SetOperatingSystems sets the value of OperatingSystems.
func (s *SessionBrowserSettingsFingerprint) SetOperatingSystems(val []SessionBrowserSettingsFingerprintOperatingSystemsItem) {
	s.OperatingSystems = val
}

// SetScreen sets the value of Screen.
func (s *SessionBrowserSettingsFingerprint) SetScreen(val OptSessionBrowserSettingsFingerprintScreen) {
	s.Screen = val
}

type SessionBrowserSettingsFingerprintBrowsersItem string

const (
	SessionBrowserSettingsFingerprintBrowsersItemChrome  SessionBrowserSettingsFingerprintBrowsersItem = "chrome"
	SessionBrowserSettingsFingerprintBrowsersItemEdge    SessionBrowserSettingsFingerprintBrowsersItem = "edge"
	SessionBrowserSettingsFingerprintBrowsersItemFirefox SessionBrowserSettingsFingerprintBrowsersItem = "firefox"
	SessionBrowserSettingsFingerprintBrowsersItemSafari  SessionBrowserSettingsFingerprintBrowsersItem = "safari"
)

// AllValues returns all SessionBrowserSettingsFingerprintBrowsersItem values.
func (SessionBrowserSettingsFingerprintBrowsersItem) AllValues() []SessionBrowserSettingsFingerprintBrowsersItem {
	return []SessionBrowserSettingsFingerprintBrowsersItem{
		SessionBrowserSettingsFingerprintBrowsersItemChrome,
		SessionBrowserSettingsFingerprintBrowsersItemEdge,
		SessionBrowserSettingsFingerprintBrowsersItemFirefox,
		SessionBrowserSettingsFingerprintBrowsersItemSafari,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionBrowserSettingsFingerprintBrowsersItem) MarshalText() ([]byte, error) {
	switch s {
	case SessionBrowserSettingsFingerprintBrowsersItemChrome:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintBrowsersItemEdge:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintBrowsersItemFirefox:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintBrowsersItemSafari:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionBrowserSettingsFingerprintBrowsersItem) UnmarshalText(data []byte) error {
	switch SessionBrowserSettingsFingerprintBrowsersItem(data) {
	case SessionBrowserSettingsFingerprintBrowsersItemChrome:
		*s = SessionBrowserSettingsFingerprintBrowsersItemChrome
		return nil
	case SessionBrowserSettingsFingerprintBrowsersItemEdge:
		*s = SessionBrowserSettingsFingerprintBrowsersItemEdge
		return nil
	case SessionBrowserSettingsFingerprintBrowsersItemFirefox:
		*s = SessionBrowserSettingsFingerprintBrowsersItemFirefox
		return nil
	case SessionBrowserSettingsFingerprintBrowsersItemSafari:
		*s = SessionBrowserSettingsFingerprintBrowsersItemSafari
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionBrowserSettingsFingerprintDevicesItem string

const (
	SessionBrowserSettingsFingerprintDevicesItemDesktop SessionBrowserSettingsFingerprintDevicesItem = "desktop"
	SessionBrowserSettingsFingerprintDevicesItemMobile  SessionBrowserSettingsFingerprintDevicesItem = "mobile"
)

// AllValues returns all SessionBrowserSettingsFingerprintDevicesItem values.
func (SessionBrowserSettingsFingerprintDevicesItem) AllValues() []SessionBrowserSettingsFingerprintDevicesItem {
	return []SessionBrowserSettingsFingerprintDevicesItem{
		SessionBrowserSettingsFingerprintDevicesItemDesktop,
		SessionBrowserSettingsFingerprintDevicesItemMobile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionBrowserSettingsFingerprintDevicesItem) MarshalText() ([]byte, error) {
	switch s {
	case SessionBrowserSettingsFingerprintDevicesItemDesktop:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintDevicesItemMobile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionBrowserSettingsFingerprintDevicesItem) UnmarshalText(data []byte) error {
	switch SessionBrowserSettingsFingerprintDevicesItem(data) {
	case SessionBrowserSettingsFingerprintDevicesItemDesktop:
		*s = SessionBrowserSettingsFingerprintDevicesItemDesktop
		return nil
	case SessionBrowserSettingsFingerprintDevicesItemMobile:
		*s = SessionBrowserSettingsFingerprintDevicesItemMobile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionBrowserSettingsFingerprintHttpVersion string

const (
	SessionBrowserSettingsFingerprintHttpVersion1 SessionBrowserSettingsFingerprintHttpVersion = "1"
	SessionBrowserSettingsFingerprintHttpVersion2 SessionBrowserSettingsFingerprintHttpVersion = "2"
)

// AllValues returns all SessionBrowserSettingsFingerprintHttpVersion values.
func (SessionBrowserSettingsFingerprintHttpVersion) AllValues() []SessionBrowserSettingsFingerprintHttpVersion {
	return []SessionBrowserSettingsFingerprintHttpVersion{
		SessionBrowserSettingsFingerprintHttpVersion1,
		SessionBrowserSettingsFingerprintHttpVersion2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionBrowserSettingsFingerprintHttpVersion) MarshalText() ([]byte, error) {
	switch s {
	case SessionBrowserSettingsFingerprintHttpVersion1:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintHttpVersion2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionBrowserSettingsFingerprintHttpVersion) UnmarshalText(data []byte) error {
	switch SessionBrowserSettingsFingerprintHttpVersion(data) {
	case SessionBrowserSettingsFingerprintHttpVersion1:
		*s = SessionBrowserSettingsFingerprintHttpVersion1
		return nil
	case SessionBrowserSettingsFingerprintHttpVersion2:
		*s = SessionBrowserSettingsFingerprintHttpVersion2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionBrowserSettingsFingerprintOperatingSystemsItem string

const (
	SessionBrowserSettingsFingerprintOperatingSystemsItemAndroid SessionBrowserSettingsFingerprintOperatingSystemsItem = "android"
	SessionBrowserSettingsFingerprintOperatingSystemsItemIos     SessionBrowserSettingsFingerprintOperatingSystemsItem = "ios"
	SessionBrowserSettingsFingerprintOperatingSystemsItemLinux   SessionBrowserSettingsFingerprintOperatingSystemsItem = "linux"
	SessionBrowserSettingsFingerprintOperatingSystemsItemMacos   SessionBrowserSettingsFingerprintOperatingSystemsItem = "macos"
	SessionBrowserSettingsFingerprintOperatingSystemsItemWindows SessionBrowserSettingsFingerprintOperatingSystemsItem = "windows"
)

// AllValues returns all SessionBrowserSettingsFingerprintOperatingSystemsItem values.
func (SessionBrowserSettingsFingerprintOperatingSystemsItem) AllValues() []SessionBrowserSettingsFingerprintOperatingSystemsItem {
	return []SessionBrowserSettingsFingerprintOperatingSystemsItem{
		SessionBrowserSettingsFingerprintOperatingSystemsItemAndroid,
		SessionBrowserSettingsFingerprintOperatingSystemsItemIos,
		SessionBrowserSettingsFingerprintOperatingSystemsItemLinux,
		SessionBrowserSettingsFingerprintOperatingSystemsItemMacos,
		SessionBrowserSettingsFingerprintOperatingSystemsItemWindows,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionBrowserSettingsFingerprintOperatingSystemsItem) MarshalText() ([]byte, error) {
	switch s {
	case SessionBrowserSettingsFingerprintOperatingSystemsItemAndroid:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemIos:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemLinux:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemMacos:
		return []byte(s), nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemWindows:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionBrowserSettingsFingerprintOperatingSystemsItem) UnmarshalText(data []byte) error {
	switch SessionBrowserSettingsFingerprintOperatingSystemsItem(data) {
	case SessionBrowserSettingsFingerprintOperatingSystemsItemAndroid:
		*s = SessionBrowserSettingsFingerprintOperatingSystemsItemAndroid
		return nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemIos:
		*s = SessionBrowserSettingsFingerprintOperatingSystemsItemIos
		return nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemLinux:
		*s = SessionBrowserSettingsFingerprintOperatingSystemsItemLinux
		return nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemMacos:
		*s = SessionBrowserSettingsFingerprintOperatingSystemsItemMacos
		return nil
	case SessionBrowserSettingsFingerprintOperatingSystemsItemWindows:
		*s = SessionBrowserSettingsFingerprintOperatingSystemsItemWindows
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SessionBrowserSettingsFingerprintScreen
type SessionBrowserSettingsFingerprintScreen struct {
	MaxHeight OptInt `json:"maxHeight"`
	MaxWidth  OptInt `json:"maxWidth"`
	MinHeight OptInt `json:"minHeight"`
	MinWidth  OptInt `json:"minWidth"`
}

// GetMaxHeight returns the value of MaxHeight.
func (s *SessionBrowserSettingsFingerprintScreen) GetMaxHeight() OptInt {
	return s.MaxHeight
}

// GetMaxWidth returns the value of MaxWidth.
func (s *SessionBrowserSettingsFingerprintScreen) GetMaxWidth() OptInt {
	return s.MaxWidth
}

// GetMinHeight returns the value of MinHeight.
func (s *SessionBrowserSettingsFingerprintScreen) GetMinHeight() OptInt {
	return s.MinHeight
}

// GetMinWidth returns the value of MinWidth.
func (s *SessionBrowserSettingsFingerprintScreen) GetMinWidth() OptInt {
	return s.MinWidth
}

// SetMaxHeight sets the value of MaxHeight.
func (s *SessionBrowserSettingsFingerprintScreen) SetMaxHeight(val OptInt) {
	s.MaxHeight = val
}

// SetMaxWidth sets the value of MaxWidth.
func (s *SessionBrowserSettingsFingerprintScreen) SetMaxWidth(val OptInt) {
	s.MaxWidth = val
}

// SetMinHeight sets the value of MinHeight.
func (s *SessionBrowserSettingsFingerprintScreen) SetMinHeight(val OptInt) {
	s.MinHeight = val
}

// SetMinWidth sets the value of MinWidth.
func (s *SessionBrowserSettingsFingerprintScreen) SetMinWidth(val OptInt) {
	s.MinWidth = val
}

// Ref: #/components/schemas/SessionBrowserSettingsViewport
type SessionBrowserSettingsViewport struct {
	Height OptInt `json:"height"`
	Width  OptInt `json:"width"`
}

// GetHeight returns the value of Height.
func (s *SessionBrowserSettingsViewport) GetHeight() OptInt {
	return s.Height
}

// GetWidth returns the value of Width.
func (s *SessionBrowserSettingsViewport) GetWidth() OptInt {
	return s.Width
}

// SetHeight sets the value of Height.
func (s *SessionBrowserSettingsViewport) SetHeight(val OptInt) {
	s.Height = val
}

// SetWidth sets the value of Width.
func (s *SessionBrowserSettingsViewport) SetWidth(val OptInt) {
	s.Width = val
}

// Ref: #/components/schemas/SessionCreateParams
type SessionCreateParams struct {
	ProjectId       string                             `json:"projectId"`
	BrowserSettings OptSessionBrowserSettings          `json:"browserSettings"`
	ExtensionId     OptString                          `json:"extensionId"`
	KeepAlive       OptBool                            `json:"keepAlive"`
	Proxies         OptSessionCreateParamsProxies      `json:"proxies"`
	Region          OptSessionCreateParamsRegion       `json:"region"`
	Timeout         OptInt                             `json:"timeout"`
	UserMetadata    OptSessionCreateParamsUserMetadata `json:"userMetadata"`
}

// GetProjectId returns the value of ProjectId.
func (s *SessionCreateParams) GetProjectId() string {
	return s.ProjectId
}

// GetBrowserSettings returns the value of BrowserSettings.
func (s *SessionCreateParams) GetBrowserSettings() OptSessionBrowserSettings {
	return s.BrowserSettings
}

// GetExtensionId returns the value of ExtensionId.
func (s *SessionCreateParams) GetExtensionId() OptString {
	return s.ExtensionId
}

// GetKeepAlive returns the value of KeepAlive.
func (s *SessionCreateParams) GetKeepAlive() OptBool {
	return s.KeepAlive
}

// GetProxies returns the value of Proxies.
func (s *SessionCreateParams) GetProxies() OptSessionCreateParamsProxies {
	return s.Proxies
}

// GetRegion returns the value of Region.
func (s *SessionCreateParams) GetRegion() OptSessionCreateParamsRegion {
	return s.Region
}

// GetTimeout returns the value of Timeout.
func (s *SessionCreateParams) GetTimeout() OptInt {
	return s.Timeout
}

// GetUserMetadata returns the value of UserMetadata.
func (s *SessionCreateParams) GetUserMetadata() OptSessionCreateParamsUserMetadata {
	return s.UserMetadata
}

// SetProjectId sets the value of ProjectId.
func (s *SessionCreateParams) SetProjectId(val string) {
	s.ProjectId = val
}

// SetBrowserSettings sets the value of BrowserSettings.
func (s *SessionCreateParams) SetBrowserSettings(val OptSessionBrowserSettings) {
	s.BrowserSettings = val
}

// SetExtensionId sets the value of ExtensionId.
func (s *SessionCreateParams) SetExtensionId(val OptString) {
	s.ExtensionId = val
}

// SetKeepAlive sets the value of KeepAlive.
func (s *SessionCreateParams) SetKeepAlive(val OptBool) {
	s.KeepAlive = val
}

// SetProxies sets the value of Proxies.
func (s *SessionCreateParams) SetProxies(val OptSessionCreateParamsProxies) {
	s.Proxies = val
}

// SetRegion sets the value of Region.
func (s *SessionCreateParams) SetRegion(val OptSessionCreateParamsRegion) {
	s.Region = val
}

// SetTimeout sets the value of Timeout.
func (s *SessionCreateParams) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetUserMetadata sets the value of UserMetadata.
func (s *SessionCreateParams) SetUserMetadata(val OptSessionCreateParamsUserMetadata) {
	s.UserMetadata = val
}

// SessionCreateParamsProxies represents sum type.
type SessionCreateParamsProxies struct {
	Type                                 SessionCreateParamsProxiesType // switch on this field
	Bool                                 bool
	SessionCreateParamsProxies1ItemArray []SessionCreateParamsProxies1Item
}

// SessionCreateParamsProxiesType is oneOf type of SessionCreateParamsProxies.
type SessionCreateParamsProxiesType string

// Possible values for SessionCreateParamsProxiesType.
const (
	BoolSessionCreateParamsProxies                                 SessionCreateParamsProxiesType = "bool"
	SessionCreateParamsProxies1ItemArraySessionCreateParamsProxies SessionCreateParamsProxiesType = "[]SessionCreateParamsProxies1Item"
)

// IsBool reports whether SessionCreateParamsProxies is bool.
func (s SessionCreateParamsProxies) IsBool() bool { return s.Type == BoolSessionCreateParamsProxies }

// IsSessionCreateParamsProxies1ItemArray reports whether SessionCreateParamsProxies is []SessionCreateParamsProxies1Item.
func (s SessionCreateParamsProxies) IsSessionCreateParamsProxies1ItemArray() bool {
	return s.Type == SessionCreateParamsProxies1ItemArraySessionCreateParamsProxies
}

// SetBool sets SessionCreateParamsProxies to bool.
func (s *SessionCreateParamsProxies) SetBool(v bool) {
	s.Type = BoolSessionCreateParamsProxies
	s.Bool = v
}

// GetBool returns bool and true boolean if SessionCreateParamsProxies is bool.
func (s SessionCreateParamsProxies) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolSessionCreateParamsProxies returns new SessionCreateParamsProxies from bool.
func NewBoolSessionCreateParamsProxies(v bool) SessionCreateParamsProxies {
	var s SessionCreateParamsProxies
	s.SetBool(v)
	return s
}

// SetSessionCreateParamsProxies1ItemArray sets SessionCreateParamsProxies to []SessionCreateParamsProxies1Item.
func (s *SessionCreateParamsProxies) SetSessionCreateParamsProxies1ItemArray(v []SessionCreateParamsProxies1Item) {
	s.Type = SessionCreateParamsProxies1ItemArraySessionCreateParamsProxies
	s.SessionCreateParamsProxies1ItemArray = v
}

// GetSessionCreateParamsProxies1ItemArray returns []SessionCreateParamsProxies1Item and true boolean if SessionCreateParamsProxies is []SessionCreateParamsProxies1Item.
func (s SessionCreateParamsProxies) GetSessionCreateParamsProxies1ItemArray() (v []SessionCreateParamsProxies1Item, ok bool) {
	if !s.IsSessionCreateParamsProxies1ItemArray() {
		return v, false
	}
	return s.SessionCreateParamsProxies1ItemArray, true
}

// NewSessionCreateParamsProxies1ItemArraySessionCreateParamsProxies returns new SessionCreateParamsProxies from []SessionCreateParamsProxies1Item.
func NewSessionCreateParamsProxies1ItemArraySessionCreateParamsProxies(v []SessionCreateParamsProxies1Item) SessionCreateParamsProxies {
	var s SessionCreateParamsProxies
	s.SetSessionCreateParamsProxies1ItemArray(v)
	return s
}

// SessionCreateParamsProxies1Item represents sum type.
type SessionCreateParamsProxies1Item struct {
	Type                   SessionCreateParamsProxies1ItemType // switch on this field
	BrowserbaseProxyConfig BrowserbaseProxyConfig
	ExternalProxyConfig    ExternalProxyConfig
}

// SessionCreateParamsProxies1ItemType is oneOf type of SessionCreateParamsProxies1Item.
type SessionCreateParamsProxies1ItemType string

// Possible values for SessionCreateParamsProxies1ItemType.
const (
	BrowserbaseProxyConfigSessionCreateParamsProxies1Item SessionCreateParamsProxies1ItemType = "BrowserbaseProxyConfig"
	ExternalProxyConfigSessionCreateParamsProxies1Item    SessionCreateParamsProxies1ItemType = "ExternalProxyConfig"
)

// IsBrowserbaseProxyConfig reports whether SessionCreateParamsProxies1Item is BrowserbaseProxyConfig.
func (s SessionCreateParamsProxies1Item) IsBrowserbaseProxyConfig() bool {
	return s.Type == BrowserbaseProxyConfigSessionCreateParamsProxies1Item
}

// IsExternalProxyConfig reports whether SessionCreateParamsProxies1Item is ExternalProxyConfig.
func (s SessionCreateParamsProxies1Item) IsExternalProxyConfig() bool {
	return s.Type == ExternalProxyConfigSessionCreateParamsProxies1Item
}

// SetBrowserbaseProxyConfig sets SessionCreateParamsProxies1Item to BrowserbaseProxyConfig.
func (s *SessionCreateParamsProxies1Item) SetBrowserbaseProxyConfig(v BrowserbaseProxyConfig) {
	s.Type = BrowserbaseProxyConfigSessionCreateParamsProxies1Item
	s.BrowserbaseProxyConfig = v
}

// GetBrowserbaseProxyConfig returns BrowserbaseProxyConfig and true boolean if SessionCreateParamsProxies1Item is BrowserbaseProxyConfig.
func (s SessionCreateParamsProxies1Item) GetBrowserbaseProxyConfig() (v BrowserbaseProxyConfig, ok bool) {
	if !s.IsBrowserbaseProxyConfig() {
		return v, false
	}
	return s.BrowserbaseProxyConfig, true
}

// NewBrowserbaseProxyConfigSessionCreateParamsProxies1Item returns new SessionCreateParamsProxies1Item from BrowserbaseProxyConfig.
func NewBrowserbaseProxyConfigSessionCreateParamsProxies1Item(v BrowserbaseProxyConfig) SessionCreateParamsProxies1Item {
	var s SessionCreateParamsProxies1Item
	s.SetBrowserbaseProxyConfig(v)
	return s
}

// SetExternalProxyConfig sets SessionCreateParamsProxies1Item to ExternalProxyConfig.
func (s *SessionCreateParamsProxies1Item) SetExternalProxyConfig(v ExternalProxyConfig) {
	s.Type = ExternalProxyConfigSessionCreateParamsProxies1Item
	s.ExternalProxyConfig = v
}

// GetExternalProxyConfig returns ExternalProxyConfig and true boolean if SessionCreateParamsProxies1Item is ExternalProxyConfig.
func (s SessionCreateParamsProxies1Item) GetExternalProxyConfig() (v ExternalProxyConfig, ok bool) {
	if !s.IsExternalProxyConfig() {
		return v, false
	}
	return s.ExternalProxyConfig, true
}

// NewExternalProxyConfigSessionCreateParamsProxies1Item returns new SessionCreateParamsProxies1Item from ExternalProxyConfig.
func NewExternalProxyConfigSessionCreateParamsProxies1Item(v ExternalProxyConfig) SessionCreateParamsProxies1Item {
	var s SessionCreateParamsProxies1Item
	s.SetExternalProxyConfig(v)
	return s
}

type SessionCreateParamsRegion string

const (
	SessionCreateParamsRegionUsWest2      SessionCreateParamsRegion = "us-west-2"
	SessionCreateParamsRegionUsEast1      SessionCreateParamsRegion = "us-east-1"
	SessionCreateParamsRegionEuCentral1   SessionCreateParamsRegion = "eu-central-1"
	SessionCreateParamsRegionApSoutheast1 SessionCreateParamsRegion = "ap-southeast-1"
)

// AllValues returns all SessionCreateParamsRegion values.
func (SessionCreateParamsRegion) AllValues() []SessionCreateParamsRegion {
	return []SessionCreateParamsRegion{
		SessionCreateParamsRegionUsWest2,
		SessionCreateParamsRegionUsEast1,
		SessionCreateParamsRegionEuCentral1,
		SessionCreateParamsRegionApSoutheast1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionCreateParamsRegion) MarshalText() ([]byte, error) {
	switch s {
	case SessionCreateParamsRegionUsWest2:
		return []byte(s), nil
	case SessionCreateParamsRegionUsEast1:
		return []byte(s), nil
	case SessionCreateParamsRegionEuCentral1:
		return []byte(s), nil
	case SessionCreateParamsRegionApSoutheast1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionCreateParamsRegion) UnmarshalText(data []byte) error {
	switch SessionCreateParamsRegion(data) {
	case SessionCreateParamsRegionUsWest2:
		*s = SessionCreateParamsRegionUsWest2
		return nil
	case SessionCreateParamsRegionUsEast1:
		*s = SessionCreateParamsRegionUsEast1
		return nil
	case SessionCreateParamsRegionEuCentral1:
		*s = SessionCreateParamsRegionEuCentral1
		return nil
	case SessionCreateParamsRegionApSoutheast1:
		*s = SessionCreateParamsRegionApSoutheast1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionCreateParamsUserMetadata map[string]jx.Raw

func (s *SessionCreateParamsUserMetadata) init() SessionCreateParamsUserMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #/components/schemas/SessionCreateResponse
type SessionCreateResponse struct {
	ID        string `json:"id"`
	CreatedAt string `json:"createdAt"`
	ExpiresAt string `json:"expiresAt"`
	// Whether the session should be kept alive upon disconnections.
	KeepAlive         bool                                    `json:"keepAlive"`
	ProjectId         string                                  `json:"projectId"`
	ProxyBytes        float64                                 `json:"proxyBytes"`
	Region            SessionCreateResponseRegion             `json:"region"`
	StartedAt         string                                  `json:"startedAt"`
	Status            SessionStatus                           `json:"status"`
	UpdatedAt         string                                  `json:"updatedAt"`
	AvgCpuUsage       OptNilFloat64                           `json:"avgCpuUsage"`
	ContextId         OptNilString                            `json:"contextId"`
	EndedAt           OptNilString                            `json:"endedAt"`
	MemoryUsage       OptNilFloat64                           `json:"memoryUsage"`
	UserMetadata      OptNilSessionCreateResponseUserMetadata `json:"userMetadata"`
	ConnectUrl        string                                  `json:"connectUrl"`
	SeleniumRemoteUrl string                                  `json:"seleniumRemoteUrl"`
	SigningKey        string                                  `json:"signingKey"`
}

// GetID returns the value of ID.
func (s *SessionCreateResponse) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SessionCreateResponse) GetCreatedAt() string {
	return s.CreatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *SessionCreateResponse) GetExpiresAt() string {
	return s.ExpiresAt
}

// GetKeepAlive returns the value of KeepAlive.
func (s *SessionCreateResponse) GetKeepAlive() bool {
	return s.KeepAlive
}

// GetProjectId returns the value of ProjectId.
func (s *SessionCreateResponse) GetProjectId() string {
	return s.ProjectId
}

// GetProxyBytes returns the value of ProxyBytes.
func (s *SessionCreateResponse) GetProxyBytes() float64 {
	return s.ProxyBytes
}

// GetRegion returns the value of Region.
func (s *SessionCreateResponse) GetRegion() SessionCreateResponseRegion {
	return s.Region
}

// GetStartedAt returns the value of StartedAt.
func (s *SessionCreateResponse) GetStartedAt() string {
	return s.StartedAt
}

// GetStatus returns the value of Status.
func (s *SessionCreateResponse) GetStatus() SessionStatus {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SessionCreateResponse) GetUpdatedAt() string {
	return s.UpdatedAt
}

// GetAvgCpuUsage returns the value of AvgCpuUsage.
func (s *SessionCreateResponse) GetAvgCpuUsage() OptNilFloat64 {
	return s.AvgCpuUsage
}

// GetContextId returns the value of ContextId.
func (s *SessionCreateResponse) GetContextId() OptNilString {
	return s.ContextId
}

// GetEndedAt returns the value of EndedAt.
func (s *SessionCreateResponse) GetEndedAt() OptNilString {
	return s.EndedAt
}

// GetMemoryUsage returns the value of MemoryUsage.
func (s *SessionCreateResponse) GetMemoryUsage() OptNilFloat64 {
	return s.MemoryUsage
}

// GetUserMetadata returns the value of UserMetadata.
func (s *SessionCreateResponse) GetUserMetadata() OptNilSessionCreateResponseUserMetadata {
	return s.UserMetadata
}

// GetConnectUrl returns the value of ConnectUrl.
func (s *SessionCreateResponse) GetConnectUrl() string {
	return s.ConnectUrl
}

// GetSeleniumRemoteUrl returns the value of SeleniumRemoteUrl.
func (s *SessionCreateResponse) GetSeleniumRemoteUrl() string {
	return s.SeleniumRemoteUrl
}

// GetSigningKey returns the value of SigningKey.
func (s *SessionCreateResponse) GetSigningKey() string {
	return s.SigningKey
}

// SetID sets the value of ID.
func (s *SessionCreateResponse) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SessionCreateResponse) SetCreatedAt(val string) {
	s.CreatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *SessionCreateResponse) SetExpiresAt(val string) {
	s.ExpiresAt = val
}

// SetKeepAlive sets the value of KeepAlive.
func (s *SessionCreateResponse) SetKeepAlive(val bool) {
	s.KeepAlive = val
}

// SetProjectId sets the value of ProjectId.
func (s *SessionCreateResponse) SetProjectId(val string) {
	s.ProjectId = val
}

// SetProxyBytes sets the value of ProxyBytes.
func (s *SessionCreateResponse) SetProxyBytes(val float64) {
	s.ProxyBytes = val
}

// SetRegion sets the value of Region.
func (s *SessionCreateResponse) SetRegion(val SessionCreateResponseRegion) {
	s.Region = val
}

// SetStartedAt sets the value of StartedAt.
func (s *SessionCreateResponse) SetStartedAt(val string) {
	s.StartedAt = val
}

// SetStatus sets the value of Status.
func (s *SessionCreateResponse) SetStatus(val SessionStatus) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SessionCreateResponse) SetUpdatedAt(val string) {
	s.UpdatedAt = val
}

// SetAvgCpuUsage sets the value of AvgCpuUsage.
func (s *SessionCreateResponse) SetAvgCpuUsage(val OptNilFloat64) {
	s.AvgCpuUsage = val
}

// SetContextId sets the value of ContextId.
func (s *SessionCreateResponse) SetContextId(val OptNilString) {
	s.ContextId = val
}

// SetEndedAt sets the value of EndedAt.
func (s *SessionCreateResponse) SetEndedAt(val OptNilString) {
	s.EndedAt = val
}

// SetMemoryUsage sets the value of MemoryUsage.
func (s *SessionCreateResponse) SetMemoryUsage(val OptNilFloat64) {
	s.MemoryUsage = val
}

// SetUserMetadata sets the value of UserMetadata.
func (s *SessionCreateResponse) SetUserMetadata(val OptNilSessionCreateResponseUserMetadata) {
	s.UserMetadata = val
}

// SetConnectUrl sets the value of ConnectUrl.
func (s *SessionCreateResponse) SetConnectUrl(val string) {
	s.ConnectUrl = val
}

// SetSeleniumRemoteUrl sets the value of SeleniumRemoteUrl.
func (s *SessionCreateResponse) SetSeleniumRemoteUrl(val string) {
	s.SeleniumRemoteUrl = val
}

// SetSigningKey sets the value of SigningKey.
func (s *SessionCreateResponse) SetSigningKey(val string) {
	s.SigningKey = val
}

type SessionCreateResponseRegion string

const (
	SessionCreateResponseRegionUsWest2      SessionCreateResponseRegion = "us-west-2"
	SessionCreateResponseRegionUsEast1      SessionCreateResponseRegion = "us-east-1"
	SessionCreateResponseRegionEuCentral1   SessionCreateResponseRegion = "eu-central-1"
	SessionCreateResponseRegionApSoutheast1 SessionCreateResponseRegion = "ap-southeast-1"
)

// AllValues returns all SessionCreateResponseRegion values.
func (SessionCreateResponseRegion) AllValues() []SessionCreateResponseRegion {
	return []SessionCreateResponseRegion{
		SessionCreateResponseRegionUsWest2,
		SessionCreateResponseRegionUsEast1,
		SessionCreateResponseRegionEuCentral1,
		SessionCreateResponseRegionApSoutheast1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionCreateResponseRegion) MarshalText() ([]byte, error) {
	switch s {
	case SessionCreateResponseRegionUsWest2:
		return []byte(s), nil
	case SessionCreateResponseRegionUsEast1:
		return []byte(s), nil
	case SessionCreateResponseRegionEuCentral1:
		return []byte(s), nil
	case SessionCreateResponseRegionApSoutheast1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionCreateResponseRegion) UnmarshalText(data []byte) error {
	switch SessionCreateResponseRegion(data) {
	case SessionCreateResponseRegionUsWest2:
		*s = SessionCreateResponseRegionUsWest2
		return nil
	case SessionCreateResponseRegionUsEast1:
		*s = SessionCreateResponseRegionUsEast1
		return nil
	case SessionCreateResponseRegionEuCentral1:
		*s = SessionCreateResponseRegionEuCentral1
		return nil
	case SessionCreateResponseRegionApSoutheast1:
		*s = SessionCreateResponseRegionApSoutheast1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionCreateResponseUserMetadata map[string]jx.Raw

func (s *SessionCreateResponseUserMetadata) init() SessionCreateResponseUserMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type SessionListResponse []Session

// Ref: #/components/schemas/SessionLiveURLs
type SessionLiveURLs struct {
	DebuggerFullscreenUrl string                `json:"debuggerFullscreenUrl"`
	DebuggerUrl           string                `json:"debuggerUrl"`
	WsUrl                 string                `json:"wsUrl"`
	Pages                 []SessionLiveURLsPage `json:"pages"`
}

// GetDebuggerFullscreenUrl returns the value of DebuggerFullscreenUrl.
func (s *SessionLiveURLs) GetDebuggerFullscreenUrl() string {
	return s.DebuggerFullscreenUrl
}

// GetDebuggerUrl returns the value of DebuggerUrl.
func (s *SessionLiveURLs) GetDebuggerUrl() string {
	return s.DebuggerUrl
}

// GetWsUrl returns the value of WsUrl.
func (s *SessionLiveURLs) GetWsUrl() string {
	return s.WsUrl
}

// GetPages returns the value of Pages.
func (s *SessionLiveURLs) GetPages() []SessionLiveURLsPage {
	return s.Pages
}

// SetDebuggerFullscreenUrl sets the value of DebuggerFullscreenUrl.
func (s *SessionLiveURLs) SetDebuggerFullscreenUrl(val string) {
	s.DebuggerFullscreenUrl = val
}

// SetDebuggerUrl sets the value of DebuggerUrl.
func (s *SessionLiveURLs) SetDebuggerUrl(val string) {
	s.DebuggerUrl = val
}

// SetWsUrl sets the value of WsUrl.
func (s *SessionLiveURLs) SetWsUrl(val string) {
	s.WsUrl = val
}

// SetPages sets the value of Pages.
func (s *SessionLiveURLs) SetPages(val []SessionLiveURLsPage) {
	s.Pages = val
}

// Ref: #/components/schemas/SessionLiveURLsPage
type SessionLiveURLsPage struct {
	ID                    string `json:"id"`
	DebuggerFullscreenUrl string `json:"debuggerFullscreenUrl"`
	DebuggerUrl           string `json:"debuggerUrl"`
	FaviconUrl            string `json:"faviconUrl"`
	Title                 string `json:"title"`
	URL                   string `json:"url"`
}

// GetID returns the value of ID.
func (s *SessionLiveURLsPage) GetID() string {
	return s.ID
}

// GetDebuggerFullscreenUrl returns the value of DebuggerFullscreenUrl.
func (s *SessionLiveURLsPage) GetDebuggerFullscreenUrl() string {
	return s.DebuggerFullscreenUrl
}

// GetDebuggerUrl returns the value of DebuggerUrl.
func (s *SessionLiveURLsPage) GetDebuggerUrl() string {
	return s.DebuggerUrl
}

// GetFaviconUrl returns the value of FaviconUrl.
func (s *SessionLiveURLsPage) GetFaviconUrl() string {
	return s.FaviconUrl
}

// GetTitle returns the value of Title.
func (s *SessionLiveURLsPage) GetTitle() string {
	return s.Title
}

// GetURL returns the value of URL.
func (s *SessionLiveURLsPage) GetURL() string {
	return s.URL
}

// SetID sets the value of ID.
func (s *SessionLiveURLsPage) SetID(val string) {
	s.ID = val
}

// SetDebuggerFullscreenUrl sets the value of DebuggerFullscreenUrl.
func (s *SessionLiveURLsPage) SetDebuggerFullscreenUrl(val string) {
	s.DebuggerFullscreenUrl = val
}

// SetDebuggerUrl sets the value of DebuggerUrl.
func (s *SessionLiveURLsPage) SetDebuggerUrl(val string) {
	s.DebuggerUrl = val
}

// SetFaviconUrl sets the value of FaviconUrl.
func (s *SessionLiveURLsPage) SetFaviconUrl(val string) {
	s.FaviconUrl = val
}

// SetTitle sets the value of Title.
func (s *SessionLiveURLsPage) SetTitle(val string) {
	s.Title = val
}

// SetURL sets the value of URL.
func (s *SessionLiveURLsPage) SetURL(val string) {
	s.URL = val
}

// Ref: #/components/schemas/SessionLog
type SessionLog struct {
	Method    string                `json:"method"`
	PageId    int                   `json:"pageId"`
	SessionId string                `json:"sessionId"`
	FrameId   OptString             `json:"frameId"`
	LoaderId  OptString             `json:"loaderId"`
	Request   OptSessionLogRequest  `json:"request"`
	Response  OptSessionLogResponse `json:"response"`
	Timestamp OptInt                `json:"timestamp"`
}

// GetMethod returns the value of Method.
func (s *SessionLog) GetMethod() string {
	return s.Method
}

// GetPageId returns the value of PageId.
func (s *SessionLog) GetPageId() int {
	return s.PageId
}

// GetSessionId returns the value of SessionId.
func (s *SessionLog) GetSessionId() string {
	return s.SessionId
}

// GetFrameId returns the value of FrameId.
func (s *SessionLog) GetFrameId() OptString {
	return s.FrameId
}

// GetLoaderId returns the value of LoaderId.
func (s *SessionLog) GetLoaderId() OptString {
	return s.LoaderId
}

// GetRequest returns the value of Request.
func (s *SessionLog) GetRequest() OptSessionLogRequest {
	return s.Request
}

// GetResponse returns the value of Response.
func (s *SessionLog) GetResponse() OptSessionLogResponse {
	return s.Response
}

// GetTimestamp returns the value of Timestamp.
func (s *SessionLog) GetTimestamp() OptInt {
	return s.Timestamp
}

// SetMethod sets the value of Method.
func (s *SessionLog) SetMethod(val string) {
	s.Method = val
}

// SetPageId sets the value of PageId.
func (s *SessionLog) SetPageId(val int) {
	s.PageId = val
}

// SetSessionId sets the value of SessionId.
func (s *SessionLog) SetSessionId(val string) {
	s.SessionId = val
}

// SetFrameId sets the value of FrameId.
func (s *SessionLog) SetFrameId(val OptString) {
	s.FrameId = val
}

// SetLoaderId sets the value of LoaderId.
func (s *SessionLog) SetLoaderId(val OptString) {
	s.LoaderId = val
}

// SetRequest sets the value of Request.
func (s *SessionLog) SetRequest(val OptSessionLogRequest) {
	s.Request = val
}

// SetResponse sets the value of Response.
func (s *SessionLog) SetResponse(val OptSessionLogResponse) {
	s.Response = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SessionLog) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

// Ref: #/components/schemas/SessionLogRequest
type SessionLogRequest struct {
	Params    SessionLogRequestParams `json:"params"`
	RawBody   string                  `json:"rawBody"`
	Timestamp OptInt                  `json:"timestamp"`
}

// GetParams returns the value of Params.
func (s *SessionLogRequest) GetParams() SessionLogRequestParams {
	return s.Params
}

// GetRawBody returns the value of RawBody.
func (s *SessionLogRequest) GetRawBody() string {
	return s.RawBody
}

// GetTimestamp returns the value of Timestamp.
func (s *SessionLogRequest) GetTimestamp() OptInt {
	return s.Timestamp
}

// SetParams sets the value of Params.
func (s *SessionLogRequest) SetParams(val SessionLogRequestParams) {
	s.Params = val
}

// SetRawBody sets the value of RawBody.
func (s *SessionLogRequest) SetRawBody(val string) {
	s.RawBody = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SessionLogRequest) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

type SessionLogRequestParams map[string]jx.Raw

func (s *SessionLogRequestParams) init() SessionLogRequestParams {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/SessionLogResponse
type SessionLogResponse struct {
	RawBody   string                   `json:"rawBody"`
	Result    SessionLogResponseResult `json:"result"`
	Timestamp OptInt                   `json:"timestamp"`
}

// GetRawBody returns the value of RawBody.
func (s *SessionLogResponse) GetRawBody() string {
	return s.RawBody
}

// GetResult returns the value of Result.
func (s *SessionLogResponse) GetResult() SessionLogResponseResult {
	return s.Result
}

// GetTimestamp returns the value of Timestamp.
func (s *SessionLogResponse) GetTimestamp() OptInt {
	return s.Timestamp
}

// SetRawBody sets the value of RawBody.
func (s *SessionLogResponse) SetRawBody(val string) {
	s.RawBody = val
}

// SetResult sets the value of Result.
func (s *SessionLogResponse) SetResult(val SessionLogResponseResult) {
	s.Result = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SessionLogResponse) SetTimestamp(val OptInt) {
	s.Timestamp = val
}

type SessionLogResponseResult map[string]jx.Raw

func (s *SessionLogResponseResult) init() SessionLogResponseResult {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/SessionRecording
type SessionRecording struct {
	Data      SessionRecordingData `json:"data"`
	SessionId string               `json:"sessionId"`
	Timestamp int                  `json:"timestamp"`
	Type      int                  `json:"type"`
}

// GetData returns the value of Data.
func (s *SessionRecording) GetData() SessionRecordingData {
	return s.Data
}

// GetSessionId returns the value of SessionId.
func (s *SessionRecording) GetSessionId() string {
	return s.SessionId
}

// GetTimestamp returns the value of Timestamp.
func (s *SessionRecording) GetTimestamp() int {
	return s.Timestamp
}

// GetType returns the value of Type.
func (s *SessionRecording) GetType() int {
	return s.Type
}

// SetData sets the value of Data.
func (s *SessionRecording) SetData(val SessionRecordingData) {
	s.Data = val
}

// SetSessionId sets the value of SessionId.
func (s *SessionRecording) SetSessionId(val string) {
	s.SessionId = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SessionRecording) SetTimestamp(val int) {
	s.Timestamp = val
}

// SetType sets the value of Type.
func (s *SessionRecording) SetType(val int) {
	s.Type = val
}

type SessionRecordingData map[string]jx.Raw

func (s *SessionRecordingData) init() SessionRecordingData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type SessionRegion string

const (
	SessionRegionUsWest2      SessionRegion = "us-west-2"
	SessionRegionUsEast1      SessionRegion = "us-east-1"
	SessionRegionEuCentral1   SessionRegion = "eu-central-1"
	SessionRegionApSoutheast1 SessionRegion = "ap-southeast-1"
)

// AllValues returns all SessionRegion values.
func (SessionRegion) AllValues() []SessionRegion {
	return []SessionRegion{
		SessionRegionUsWest2,
		SessionRegionUsEast1,
		SessionRegionEuCentral1,
		SessionRegionApSoutheast1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionRegion) MarshalText() ([]byte, error) {
	switch s {
	case SessionRegionUsWest2:
		return []byte(s), nil
	case SessionRegionUsEast1:
		return []byte(s), nil
	case SessionRegionEuCentral1:
		return []byte(s), nil
	case SessionRegionApSoutheast1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionRegion) UnmarshalText(data []byte) error {
	switch SessionRegion(data) {
	case SessionRegionUsWest2:
		*s = SessionRegionUsWest2
		return nil
	case SessionRegionUsEast1:
		*s = SessionRegionUsEast1
		return nil
	case SessionRegionEuCentral1:
		*s = SessionRegionEuCentral1
		return nil
	case SessionRegionApSoutheast1:
		*s = SessionRegionApSoutheast1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SessionStatus
type SessionStatus string

const (
	SessionStatusRUNNING   SessionStatus = "RUNNING"
	SessionStatusERROR     SessionStatus = "ERROR"
	SessionStatusTIMEDOUT  SessionStatus = "TIMED_OUT"
	SessionStatusCOMPLETED SessionStatus = "COMPLETED"
)

// AllValues returns all SessionStatus values.
func (SessionStatus) AllValues() []SessionStatus {
	return []SessionStatus{
		SessionStatusRUNNING,
		SessionStatusERROR,
		SessionStatusTIMEDOUT,
		SessionStatusCOMPLETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionStatus) MarshalText() ([]byte, error) {
	switch s {
	case SessionStatusRUNNING:
		return []byte(s), nil
	case SessionStatusERROR:
		return []byte(s), nil
	case SessionStatusTIMEDOUT:
		return []byte(s), nil
	case SessionStatusCOMPLETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionStatus) UnmarshalText(data []byte) error {
	switch SessionStatus(data) {
	case SessionStatusRUNNING:
		*s = SessionStatusRUNNING
		return nil
	case SessionStatusERROR:
		*s = SessionStatusERROR
		return nil
	case SessionStatusTIMEDOUT:
		*s = SessionStatusTIMEDOUT
		return nil
	case SessionStatusCOMPLETED:
		*s = SessionStatusCOMPLETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SessionUpdateParams
type SessionUpdateParams struct {
	ProjectId string                    `json:"projectId"`
	Status    SessionUpdateParamsStatus `json:"status"`
}

// GetProjectId returns the value of ProjectId.
func (s *SessionUpdateParams) GetProjectId() string {
	return s.ProjectId
}

// GetStatus returns the value of Status.
func (s *SessionUpdateParams) GetStatus() SessionUpdateParamsStatus {
	return s.Status
}

// SetProjectId sets the value of ProjectId.
func (s *SessionUpdateParams) SetProjectId(val string) {
	s.ProjectId = val
}

// SetStatus sets the value of Status.
func (s *SessionUpdateParams) SetStatus(val SessionUpdateParamsStatus) {
	s.Status = val
}

type SessionUpdateParamsStatus string

const (
	SessionUpdateParamsStatusREQUESTRELEASE SessionUpdateParamsStatus = "REQUEST_RELEASE"
)

// AllValues returns all SessionUpdateParamsStatus values.
func (SessionUpdateParamsStatus) AllValues() []SessionUpdateParamsStatus {
	return []SessionUpdateParamsStatus{
		SessionUpdateParamsStatusREQUESTRELEASE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SessionUpdateParamsStatus) MarshalText() ([]byte, error) {
	switch s {
	case SessionUpdateParamsStatusREQUESTRELEASE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SessionUpdateParamsStatus) UnmarshalText(data []byte) error {
	switch SessionUpdateParamsStatus(data) {
	case SessionUpdateParamsStatusREQUESTRELEASE:
		*s = SessionUpdateParamsStatusREQUESTRELEASE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SessionUserMetadata map[string]jx.Raw

func (s *SessionUserMetadata) init() SessionUserMetadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/UploadCreateParams
type UploadCreateParamsMultipart struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadCreateParamsMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadCreateParamsMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/UploadCreateResponse
type UploadCreateResponse struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *UploadCreateResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *UploadCreateResponse) SetMessage(val string) {
	s.Message = val
}

type XBBAPIKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *XBBAPIKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *XBBAPIKey) SetAPIKey(val string) {
	s.APIKey = val
}
